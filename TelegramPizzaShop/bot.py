# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import sqlite3  # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
from datetime import datetime
import types
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import *  # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram
from aiogram.types import InlineKeyboardButton, LabeledPrice, ShippingOption, ShippingQuery, Message, \
    InlineKeyboardMarkup  # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –∏ –æ–ø–ª–∞—Ç—ã
from aiogram.dispatcher.filters.state import State, StatesGroup

# –ü–æ–¥—Å–æ–µ–¥–∏–Ω—è–µ–º –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é —Ç–æ–∫–µ–Ω–∞ –æ—Ç BotFather
bot = Bot(token='5656237171:AAHstiKeRWN88t1874TtAhXRzEalLw6xrSc')
dp = Dispatcher(bot, storage=MemoryStorage())


class Form(StatesGroup):
    addres = State()
    pick_up_addres = State()
    name = State()


# –ü—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message_handler(content_types=['text'])
async def start(message: types.Message):
    text = message.text.lower()
    # –ü—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if text == '/start':
        # –°–æ–µ–¥–∏–Ω—è–µ–º—Å—è —Å –ë–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        sqlite_connection = sqlite3.connect('Customers')
        cur = sqlite_connection.cursor()
        # –ü–æ–ª—É—á–∞–µ–º id —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        cur.execute(
            f'SELECT ID_of_chat FROM admin;')
        admin = cur.fetchone()
        admin = int(admin[0])
        # –ü—Ä–æ–≤–µ—Ä—è—é –µ—Å—Ç—å –ª–∏ id –Ω–∞—á–∏–Ω–∞—é—â–µ–≥–æ —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –≤ –ë–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cur.execute(
            f'SELECT User_id FROM Customers;')
        itog = cur.fetchall()
        itog = [i[0] for i in itog]
        # –ï—Å–ª–∏ id –ø–∏—à—É—â–µ–≥–æ /start —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if message.from_user.id == admin:
            await bot.send_message(message.from_user.id,
                                   '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –í–∞—Å, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –û—Ç –º–µ–Ω—è –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ—Å—Ç—É–ø–∏–≤—à–∏—Ö –∑–∞–∫–∞–∑–∞—Ö –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.')
        # –ï—Å–ª–∏ id –µ—Å—Ç—å –≤ –ë–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –ø–æ –∏–º–µ–Ω–∏ –∏ —Å—Ä–∞–∑—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å
        elif message.from_user.id in itog:
            cur.execute(
                f'SELECT Name FROM Customers WHERE User_id = "{message.from_user.id}";')
            name = cur.fetchone()
            cur.execute(
                f'UPDATE Customers SET Cart = NULL WHERE User_id = "{message.from_user.id}";')
            sqlite_connection.commit()
            name = name[0]
            print(datetime.now().strftime('%H:%M:%S %d.%m.%Y') + ' –ó–∞—à—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ' + name + '. id- ' + str(
                message.from_user.id))
            question = '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ' + name + '! –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∏—Ü—Ü –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ü–∏—Ü—Ü—ã.'
            keyboard = types.InlineKeyboardMarkup()  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
            key_listofpizzas = types.InlineKeyboardButton(text='üçï –ü–∏—Ü—Ü—ã üçï',
                                                          callback_data='btn_pizzas')  # –∫–Ω–æ–ø–∫–∞ ¬´—Å–ø–∏—Å–æ–∫ –ø–∏—Ü—Ü¬ª
            keyboard.add(key_listofpizzas)  # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await bot.send_message(message.from_user.id, text=question, reply_markup=keyboard)
        # –ï—Å–ª–∏ id –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ –±–æ—Ç—É, —Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        else:
            await Form.name.set()
            await bot.send_message(message.from_user.id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –∫–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?")
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

    # –†–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ /help
    if text == '/help':
        await bot.send_message(message.from_user.id,
                               "–ù–∞—à–∏–º –±–æ—Ç–æ–º –æ—á–µ–Ω—å –ª–µ–≥–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è. –ö–∞–∫ –≥–æ–≤–æ—Ä—è—Ç –≤ –†–æ—Å—Å–∏–∏: ¬´–ö–∞–∫ 2"
                               " –ø–∞–ª—å—Ü–∞‚Ä¶¬ª. \n\n–ù–∞–ø–∏—à–∏—Ç–µ:\n\n'/start', —á—Ç–æ–±—ã"
                               " –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∏—Ü—Ü. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –í–∞—Å –ø–∏—Ü—Ü—É, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–π –∏ –¥–æ–±–∞–≤–∏—Ç—å –µ—ë –≤ –∫–æ—Ä–∑–∏–Ω—É. –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∏—Ü—Ü—ã –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞."
                               "\n\n–ù–∞–∂–º–∏—Ç–µ /cart, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —á—Ç–æ —É –≤–∞—Å –≤—ã–±—Ä–∞–Ω–æ, —Ç–∞–º –∂–µ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.")


# –ó–∞–ø–∏—Å—ã–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
@dp.message_handler(state=Form.name)
async def get_name(message: types.Message, state: FSMContext):  # –ø–æ–ª—É—á–∞–µ–º —Ñ–∞–º–∏–ª–∏—é
    await state.update_data(name=message.text)
    sqlite_connection = sqlite3.connect('Customers')
    cur = sqlite_connection.cursor()
    # –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ –ë–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cur.execute(
        f'INSERT INTO Customers(Name, User_id) VALUES("{message.text}", "{message.from_user.id}");')
    sqlite_connection.commit()
    keyboard = types.InlineKeyboardMarkup()  # –Ω–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    key_listofpizzas = types.InlineKeyboardButton(text='üçï –ü–∏—Ü—Ü—ã üçï', callback_data='btn_pizzas')  # –∫–Ω–æ–ø–∫–∞ ¬´—Å–ø–∏—Å–æ–∫ –ø–∏—Ü—Ü¬ª
    keyboard.add(key_listofpizzas)  # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    question = '–û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ, —è - –ü–∏—Ü—Ü–∞–ë–æ—Ç, –∏ —è –ø–æ–º–æ–≥—É –í–∞–º –∑–∞–∫–∞–∑–∞—Ç—å –ø–∏—Ü—Ü—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ü–∏—Ü—Ü—ã, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç'
    await bot.send_message(message.from_user.id, text=question, reply_markup=keyboard)
    print(
        datetime.now().strftime('%H:%M:%S %d.%m.%Y') + ' –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ' + message.text + '. id: ' + str(
            message.from_user.id))
    await state.finish()


# –†–µ–∞–∫—Ü–∏—è –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(state=Form.addres)
async def get_address(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)
    sqlite_connection = sqlite3.connect('Customers')
    cur = sqlite_connection.cursor()
    cur.execute(
        f'SELECT ID_of_chat FROM admin;')
    admin = cur.fetchone()
    admin = int(admin[0])
    cur.execute(
        f'SELECT Name FROM Customers WHERE User_id="{message.chat.id}";')
    name = cur.fetchone()
    name = name[0]
    cur.execute(
        f'SELECT Phone FROM admin;')
    phone = cur.fetchone()
    phone = phone[0]
    now = datetime.now()
    # –ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await bot.send_message(admin, '–û–ø–ª–∞—á–µ–Ω –∑–∞–∫–∞–∑ –æ—Ç ' + name + ', –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ' + str(
        message.chat.id) + '.\n–ê–¥—Ä–µ—Å: ' + message.text + '\n–í—Ä–µ–º—è: ' + now.strftime('%H:%M:%S %d.%m.%Y'))
    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.send_message(message.from_user.id,
                           '–í–∞—à –∑–∞–∫–∞–∑, –Ω–æ–º–µ—Ä ' + str(
                               message.chat.id) + ', –≤ –ø—É—Ç–∏. –í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –ø–æ–≤–æ–¥—É –í–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –∑–≤–æ–Ω–∏—Ç–µ –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n–ù–æ–º–µ—Ä: ' + phone + '\n–ù–æ–º–µ—Ä –í–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞: ' + str(
                               message.chat.id) + '\n–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞–ø–∏—à–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥—É /start.')
    sqlite_connection = sqlite3.connect('Customers')
    cur = sqlite_connection.cursor()
    cur.execute(
        f'UPDATE Customers SET Cart = NULL WHERE User_id = "{message.chat.id}";')
    sqlite_connection.commit()
    print('–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ–∞–Ω—Å–∞ ' + now.strftime('%H:%M:%S %d.%m.%Y') + '. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ' + name + '. id: ' + str(
        message.chat.id))
    await state.finish()


# –†–µ–∞–∫—Ü–∏—è –Ω–∞ –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∞–¥—Ä–µ—Å–∞ –¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞
@dp.message_handler(state=Form.pick_up_addres)
async def get_pick_up(message: types.Message, state: FSMContext):
    await state.update_data(pick_up_address=message.text)
    sqlite_connection = sqlite3.connect('Customers')
    cur = sqlite_connection.cursor()
    cur.execute(
        f'SELECT ID_of_chat FROM admin;')
    admin = cur.fetchone()
    admin = int(admin[0])
    cur.execute(
        f'SELECT Name FROM Customers WHERE User_id="{message.chat.id}";')
    name = cur.fetchone()
    name = name[0]
    cur.execute(
        f'SELECT Phone FROM admin;')
    phone = cur.fetchone()
    phone = phone[0]
    now = datetime.now()
    # –ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await bot.send_message(admin, '–û–ø–ª–∞—á–µ–Ω –∑–∞–∫–∞–∑ –æ—Ç ' + name + ', –Ω–æ–º–µ—Ä: ' + str(
        message.chat.id) + '.\n–°–∞–º–æ–≤—ã–≤–æ–∑ –ø–æ –∞–¥—Ä–µ—Å—É: ' + message.text + '\n–í—Ä–µ–º—è: ' + now.strftime(
        '%H:%M:%S %d.%m.%Y'))
    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.send_message(message.chat.id,
                           '–í–∞—à –∑–∞–∫–∞–∑, –Ω–æ–º–µ—Ä ' + str(
                               message.chat.id) + ', –±—É–¥–µ—Ç –í–∞—Å –∂–¥–∞—Ç—å –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –í–∞–º–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ. –í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –ø–æ–≤–æ–¥—É –í–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –∑–≤–æ–Ω–∏—Ç–µ –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n–ù–æ–º–µ—Ä: ' + phone + '\n–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞–ø–∏—à–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥—É /start.')
    sqlite_connection = sqlite3.connect('Customers')
    cur = sqlite_connection.cursor()
    cur.execute(
        f'UPDATE Customers SET Cart = NULL WHERE User_id = "{message.chat.id}";')
    sqlite_connection.commit()
    print('–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ–∞–Ω—Å–∞ ' + now.strftime('%H:%M:%S %d.%m.%Y') + '. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ' + name + '. id: ' + str(
        message.chat.id))
    await state.finish()


# –†–µ–∞–∫—Ü–∏—è –±–æ—Ç–∞ –Ω–∞ –∫–Ω–æ–ø–∫–∏
@dp.callback_query_handler(lambda call: 'btn' in call.data)
async def callback_worker(call: types.CallbackQuery):
    if call.data == "btn_pizzas":  # call.data —ç—Ç–æ callback_data, –∫–æ—Ç–æ—Ä—É—é –º—ã —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏
        await call.message.delete()  # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–ª–∏—Å—å –≤ —á–∞—Ç–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        sqlite_connection = sqlite3.connect('Customers')
        cur = sqlite_connection.cursor()
        cur.execute(
            f'SELECT PizzaName FROM Pizza;')
        pizza = cur.fetchall()
        pizza = [i[0] for i in pizza]
        button_list = []
        for product in pizza:
            text = f'üçï {product}'
            button_list.append(
                [InlineKeyboardButton(text, callback_data=f'btn_id_{product}')]
            )
        button_list.append(
            [InlineKeyboardButton(text='üõí –í–∞—à–∞ –ö–æ—Ä–∑–∏–Ω–∞', callback_data='btn_cart')]
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=button_list)
        await bot.send_message(call.message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–∏—Ü—Ü—É:', reply_markup=keyboard)
    elif call.data == "btn_cart":
        summ = 0
        await call.message.delete()
        sqlite_connection = sqlite3.connect('Customers')
        cur = sqlite_connection.cursor()
        cur.execute(
            f'SELECT Cart FROM Customers WHERE User_id="{call.message.chat.id}";')
        crt = cur.fetchone()
        if None in crt:
            keyboard = types.InlineKeyboardMarkup()
            key_listofpizzas = types.InlineKeyboardButton(text='üçï –ü–∏—Ü—Ü—ã üçï',
                                                          callback_data='btn_pizzas')
            keyboard.add(key_listofpizzas)
            question = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–µ—ë –ø–∏—Ü—Ü—É, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑'
            await bot.send_message(call.message.chat.id, text=question, reply_markup=keyboard)
        else:
            crt = list(crt)[0].split('_')[:-1]
            for i in crt:
                summ += int(i.split(' ')[-1])
            txt = ''
            button_list = []
            for i in crt:
                txt += '–ü–∏—Ü—Ü–∞ ' + i + ' —Ä—É–±–ª–µ–π\n'
            txt += '\n–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: ' + str(summ) + ' —Ä—É–±–ª–µ–π'
            for i in crt:
                i = ' '.join(i.split(' ')[:-1])
                text = '‚ùå –£–¥–∞–ª–∏—Ç—å –ø–∏—Ü—Ü—É ' + i + ' –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã ‚ùå'
                button_list.append(
                    [InlineKeyboardButton(text, callback_data=f'btn_del_{i}')]
                )
            button_list.append(
                [InlineKeyboardButton(text='üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É', callback_data='btn_clear')]
            )
            button_list.append(
                [InlineKeyboardButton(text='üìù –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', callback_data=F'btn_Order_{summ}')]
            )
            button_list.append(
                [InlineKeyboardButton(text='<- –ö –º–µ–Ω—é –ø–∏—Ü—Ü üçï', callback_data='btn_pizzas')]
            )
            keyboard = InlineKeyboardMarkup(inline_keyboard=button_list)
            await bot.send_message(call.message.chat.id, text=txt, reply_markup=keyboard)
    elif 'id' in call.data:
        await call.message.delete()
        b_l = []
        product = call.data.split('_')
        product = product[2]
        sqlite_connection = sqlite3.connect('Customers')
        cur = sqlite_connection.cursor()
        cur.execute(
            f'SELECT image FROM Pizza WHERE PizzaName="{product}";')
        img = cur.fetchone()
        img = img[0]
        img = open(img, 'rb')
        cur.execute(
            f'SELECT caption FROM Pizza WHERE PizzaName="{product}";')
        cap = cur.fetchone()
        cap = cap[0]
        cur.execute(
            f'SELECT TwentyFive FROM Pizza WHERE PizzaName="{product}";')
        tfcm = cur.fetchone()
        tfcm = tfcm[0]
        text1 = f'{tfcm}—Ä—É–±  (25 —Å–º)'
        b_l.append(
            [InlineKeyboardButton(text1, callback_data=f'btn_25_{product}')]
        )
        cur.execute(
            f'SELECT Thirty FROM Pizza WHERE PizzaName="{product}";')
        thcm = cur.fetchone()
        thcm = thcm[0]
        text2 = f'{thcm}—Ä—É–±  (30 —Å–º)'
        b_l.append(
            [InlineKeyboardButton(text2, callback_data=f'btn_30_{product}')]
        )
        cur.execute(
            f'SELECT ThirtyFive FROM Pizza WHERE PizzaName="{product}";')
        thfcm = cur.fetchone()
        thfcm = thfcm[0]
        text3 = f'{thfcm}—Ä—É–±  (35 —Å–º)'
        b_l.append(
            [InlineKeyboardButton(text3, callback_data=f'btn_35_{product}')]
        )
        text4 = '<- –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É'
        b_l.append(
            [InlineKeyboardButton(text4, callback_data='btn_pizzas')]
        )
        keyboard1 = InlineKeyboardMarkup(inline_keyboard=b_l)
        await bot.send_photo(call.message.chat.id, img, caption=cap, reply_markup=keyboard1)
    elif '25' in call.data:
        await call.message.delete()
        product = call.data.split('_')
        product = product[2]
        sqlite_connection = sqlite3.connect('Customers')
        cur = sqlite_connection.cursor()
        cur.execute(
            f'SELECT TwentyFive FROM Pizza WHERE PizzaName="{product}";')
        tfcm = cur.fetchone()
        tfcm = int(tfcm[0])
        current = product + ' ' + str(tfcm) + '_'
        cur.execute(
            f'SELECT Cart FROM Customers WHERE User_id="{call.message.chat.id}";')
        cart1 = cur.fetchone()
        if None in cart1:
            crt = current
            cur.execute(
                f'UPDATE Customers SET Cart = "{crt}" WHERE User_id = "{call.message.chat.id}";')
            sqlite_connection.commit()
        else:
            crt = ' '.join(list(cart1))
            crt = crt + current
            cur.execute(
                f'UPDATE Customers SET Cart = "{crt}" WHERE User_id = "{call.message.chat.id}";')
            sqlite_connection.commit()
        kb = InlineKeyboardMarkup(row_width=2)
        kb_bck = InlineKeyboardButton(text='üçï –ú–µ–Ω—é –ø–∏—Ü—Ü', callback_data='btn_pizzas')
        kb_cart = InlineKeyboardButton(text='üõí –í–∞—à–∞ –ö–æ—Ä–∑–∏–Ω–∞', callback_data='btn_cart')
        kb.add(kb_cart, kb_bck)
        text = '–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É –ø–∏—Ü—Ü—É: ' + product + ' 25 —Å–º –∑–∞ ' + str(
            tfcm) + ' —Ä—É–±–ª–µ–π.\n –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É,\n –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥—É—é –ø–∏—Ü—Ü—É –ø–µ—Ä–µ–π–¥–∏—Ç–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é.'
        await bot.send_message(call.message.chat.id, text, reply_markup=kb)
    elif '30' in call.data:
        await call.message.delete()
        product = call.data.split('_')
        product = product[2]
        sqlite_connection = sqlite3.connect('Customers')
        cur = sqlite_connection.cursor()
        cur.execute(
            f'SELECT Thirty FROM Pizza WHERE PizzaName="{product}";')
        thcm = cur.fetchone()
        thcm = int(thcm[0])
        current = product + ' ' + str(thcm) + '_'
        cur.execute(
            f'SELECT Cart FROM Customers WHERE User_id="{call.message.chat.id}";')
        cart1 = cur.fetchone()
        if None in cart1:
            crt = current
            cur.execute(
                f'UPDATE Customers SET Cart = "{crt}" WHERE User_id = "{call.message.chat.id}";')
            sqlite_connection.commit()
        else:
            crt = ' '.join(list(cart1))
            crt = crt + current
            cur.execute(
                f'UPDATE Customers SET Cart = "{crt}" WHERE User_id = "{call.message.chat.id}";')
            sqlite_connection.commit()
        kb = InlineKeyboardMarkup(row_width=2)
        kb_bck = InlineKeyboardButton(text='üçï –ú–µ–Ω—é –ø–∏—Ü—Ü', callback_data='btn_pizzas')
        kb_cart = InlineKeyboardButton(text='üõí –í–∞—à–∞ –ö–æ—Ä–∑–∏–Ω–∞', callback_data='btn_cart')
        kb.add(kb_cart, kb_bck)
        text = '–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É –ø–∏—Ü—Ü—É: ' + product + ' 30 —Å–º –∑–∞ ' + str(
            thcm) + ' —Ä—É–±–ª–µ–π.\n –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É,\n –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥—É—é –ø–∏—Ü—Ü—É –ø–µ—Ä–µ–π–¥–∏—Ç–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é.'
        await bot.send_message(call.message.chat.id, text, reply_markup=kb)
    elif '35' in call.data:
        await call.message.delete()
        product = call.data.split('_')
        product = product[2]
        sqlite_connection = sqlite3.connect('Customers')
        cur = sqlite_connection.cursor()
        cur.execute(
            f'SELECT ThirtyFive FROM Pizza WHERE PizzaName="{product}";')
        thfcm = cur.fetchone()
        thfcm = int(thfcm[0])
        current = product + ' ' + str(thfcm) + '_'
        cur.execute(
            f'SELECT Cart FROM Customers WHERE User_id="{call.message.chat.id}";')
        cart1 = cur.fetchone()
        if None in cart1:
            crt = current
            cur.execute(
                f'UPDATE Customers SET Cart = "{crt}" WHERE User_id = "{call.message.chat.id}";')
            sqlite_connection.commit()
        else:
            crt = ' '.join(list(cart1))
            crt = crt + current
            cur.execute(
                f'UPDATE Customers SET Cart = "{crt}" WHERE User_id = "{call.message.chat.id}";')
            sqlite_connection.commit()
        kb = InlineKeyboardMarkup(row_width=2)
        kb_bck = InlineKeyboardButton(text='üçï –ú–µ–Ω—é –ø–∏—Ü—Ü', callback_data='btn_pizzas')
        kb_cart = InlineKeyboardButton(text='üõí –í–∞—à–∞ –ö–æ—Ä–∑–∏–Ω–∞', callback_data='btn_cart')
        kb.add(kb_cart, kb_bck)
        text = '–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É –ø–∏—Ü—Ü—É: ' + product + ' 35 —Å–º –∑–∞ ' + str(
            thfcm) + ' —Ä—É–±–ª–µ–π.\n –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É,\n –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥—É—é –ø–∏—Ü—Ü—É –ø–µ—Ä–µ–π–¥–∏—Ç–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é.'
        await bot.send_message(call.message.chat.id, text, reply_markup=kb)
    elif call.data == "btn_clear":
        await call.message.delete()
        sqlite_connection = sqlite3.connect('Customers')
        cur = sqlite_connection.cursor()
        cur.execute(
            f'UPDATE Customers SET Cart = NULL WHERE User_id = "{call.message.chat.id}";')
        sqlite_connection.commit()
        kb = InlineKeyboardMarkup()
        kb_bck = InlineKeyboardButton(text='üçï –ú–µ–Ω—é –ø–∏—Ü—Ü', callback_data='btn_pizzas')
        kb.add(kb_bck)
        text = '–ö–æ—Ä–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞'
        await bot.send_message(call.message.chat.id, text, reply_markup=kb)
    elif 'Order' in call.data:
        await call.message.delete()
        a = call.data.split('_')
        summ = a[-1]
        await bot.send_message(call.message.chat.id, '–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞. –í–∞—à –∑–∞–∫–∞–∑ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.')
        sqlite_connection = sqlite3.connect('Customers')
        cur = sqlite_connection.cursor()
        cur.execute(
            f'SELECT ID_of_chat FROM admin;')
        admin = cur.fetchone()
        admin = int(admin[0])
        cur.execute(
            f'SELECT Name FROM Customers WHERE User_id="{call.message.chat.id}";')
        Name = cur.fetchone()
        Name = Name[0]
        button_list = [
            [InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑', callback_data=f'btn_ok_{call.message.chat.id}_{summ}')], [
                InlineKeyboardButton(text='–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å',
                                     callback_data=f'btn_wrong_{call.message.chat.id}_{summ}')],
            [InlineKeyboardButton(text='–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∏—Ü—Ü–∞', callback_data=f'btn_absent_{call.message.chat.id}_{summ}')]]
        keyboard = InlineKeyboardMarkup(inline_keyboard=button_list)
        cur.execute(
            f'SELECT Cart FROM Customers WHERE User_id="{call.message.chat.id}";')
        crt = list(cur.fetchone())[0].split('_')[:-1]
        await bot.send_message(admin,
                               '–ü–æ–ª—É—á–µ–Ω –∑–∞–∫–∞–∑ –æ—Ç ' + str(Name) + '. –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ' + str(
                                   call.message.chat.id) + '\n–ó–∞–∫–∞–∑:\n' + '\n'.join(
                                   [str(i) for i in crt]) + '\n\n–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: ' + str(
                                   summ) + ' —Ä—É–±\n' + '–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: ' + datetime.now().strftime('%H:%M:%S %d.%m.%Y'),
                               reply_markup=keyboard)
    elif 'ok' in call.data:
        sqlite_connection = sqlite3.connect('Customers')
        cur = sqlite_connection.cursor()
        cur.execute(
            f'SELECT Pay_Token FROM Token;')
        token = cur.fetchone()
        token = token[0]
        print(str(call.message.chat.id) + ' –æ–ø–ª–∞—Ç–∞')
        a = call.data.split('_')
        cid = int(a[2])
        price = int(a[3]) * 100
        cur.execute(
            f'SELECT Cart FROM Customers WHERE User_id="{cid}";')
        crt = list(cur.fetchone())[0].split('_')[:-1]
        a = call.data.split('_')
        cid = int(a[2])
        price = int(a[3]) * 100
        PRICES = [
            LabeledPrice(label='–í–∞—à –∑–∞–∫–∞–∑', amount=price)
        ]
        await bot.send_invoice(cid,
                               title='–í–∞—à –∑–∞–∫–∞–∑',
                               description='\n'.join([str(i) for i in crt]),
                               provider_token=token,
                               currency='rub',
                               need_phone_number=True,
                               prices=PRICES,
                               start_parameter='example',
                               payload='some_invoice')
    elif 'absent' in call.data:
        a = call.data.split('_')
        cid = int(a[2])
        last_message = a[-1]
        sqlite_connection = sqlite3.connect('Customers')
        cur = sqlite_connection.cursor()
        cur.execute(
            f'SELECT ID_of_chat FROM admin;')
        admin = cur.fetchone()
        admin = int(admin[0])
        cur.execute(
            f'SELECT Cart FROM Customers WHERE User_id="{cid}";')
        crt = list(cur.fetchone())[0].split('_')
        button_list = []
        for i in crt:
            item = i.split(' ')
            i = item[0]
            button_list.append(
                [InlineKeyboardButton(i, callback_data=f'btn_ab_{i}_{cid}_{last_message}')]
            )
        keyboard = InlineKeyboardMarkup(inline_keyboard=button_list)
        await bot.send_message(admin, text='–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—Å—É—Ç—Å–≤—É—é—â—É—é –ø–∏—Ü—Ü—É', reply_markup=keyboard)
    elif 'wrong' in call.data:
        a = call.data.split('_')
        cid = int(a[2])
        sqlite_connection = sqlite3.connect('Customers')
        cur = sqlite_connection.cursor()
        cur.execute(
            f'SELECT Phone FROM admin;')
        phone = cur.fetchone()
        phone = phone[0]
        await bot.send_message(cid,
                               '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑. –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –∑–≤–æ–Ω–∏—Ç–µ: ' + phone)
    elif call.data == "btn_delivery":
        await call.message.delete()
        await Form.addres.set()
        await bot.send_message(call.message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å')
    elif call.data == "btn_pick_up":
        await call.message.delete()
        sqlite_connection = sqlite3.connect('Customers')
        cur = sqlite_connection.cursor()
        cur.execute(
            f'SELECT Address FROM Shops;')
        shops = cur.fetchall()
        shops = [i[0] for i in shops]
        await Form.pick_up_addres.set()
        await bot.send_message(call.message.chat.id,
                               '–í–æ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤, –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–≥–æ, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–∞—Ç—å.\n' + '\n'.join(
                                   [str(i) for i in shops]))
    elif 'ab' in call.data:
        await call.message.delete()
        a = call.data.split('_')
        cid = int(a[3])
        apizza = a[2]
        kb = InlineKeyboardMarkup(row_width=2)
        kb_bck = InlineKeyboardButton(text='üçï –ú–µ–Ω—é –ø–∏—Ü—Ü', callback_data='btn_pizzas')
        kb_cart = InlineKeyboardButton(text='üõí –í–∞—à–∞ –ö–æ—Ä–∑–∏–Ω–∞', callback_data='btn_cart')
        kb.add(kb_cart, kb_bck)
        sqlite_connection = sqlite3.connect('Customers')
        cur = sqlite_connection.cursor()
        cur.execute(
            f'SELECT Cart FROM Customers WHERE User_id="{cid}";')
        crt = list(cur.fetchone())[0].split('_')
        for i in crt:
            if apizza in i:
                crt.remove(i)
                crt = '_'.join(crt)
                cur.execute(
                    f'UPDATE Customers SET Cart = "{crt}" WHERE User_id = "{cid}";')
                sqlite_connection.commit()
                break
            else:
                continue
        await bot.send_message(cid,
                               '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–∏—Ü—Ü–∞ ' + apizza + ' –æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–º–µ—Å—Ç–æ –Ω–µ—ë –¥—Ä—É–≥—É—é.',
                               reply_markup=kb)
    elif 'del' in call.data:
        await call.message.delete()
        a = call.data.split('_')
        dpizza = a[2]
        sqlite_connection = sqlite3.connect('Customers')
        cur = sqlite_connection.cursor()
        cur.execute(
            f'SELECT Cart FROM Customers WHERE User_id="{call.message.chat.id}";')
        crt = list(cur.fetchone())[0].split('_')
        for i in crt:
            if dpizza in i:
                crt.remove(i)
                crt = '_'.join(crt)
                cur.execute(
                    f'UPDATE Customers SET Cart = "{crt}" WHERE User_id = "{call.message.chat.id}";')
                sqlite_connection.commit()
                break
            else:
                continue
        kb = InlineKeyboardMarkup(row_width=2)
        kb_bck = InlineKeyboardButton(text='üçï –ú–µ–Ω—é –ø–∏—Ü—Ü', callback_data='btn_pizzas')
        kb_cart = InlineKeyboardButton(text='üõí –í–∞—à–∞ –ö–æ—Ä–∑–∏–Ω–∞', callback_data='btn_cart')
        kb.add(kb_cart, kb_bck)
        await bot.send_message(call.message.chat.id, '–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–∏—Ü—Ü–∞ ' + dpizza, reply_markup=kb)


@dp.callback_query_handler(lambda q: True)
async def shipping_process(shipping_query: ShippingQuery):
    Shipping_option = ShippingOption(
        id='deliver',
        title='–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –∞–¥—Ä–µ—Å—É'
    )
    Pick_up_shipping = ShippingOption(
        id='pickup',
        title='–°–∞–º–æ–≤—ã–≤–æ–∑'
    )
    shipping_options = [Shipping_option, Pick_up_shipping]
    await bot.answer_shipping_query(
        shipping_query.id,
        ok=True,
        shipping_options=shipping_options
    )


@dp.pre_checkout_query_handler(lambda q: True)
async def checkout_process(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(str(pre_checkout_query.id), ok=True)


@dp.message_handler(content_types=['successful_payment'])
async def successful_payment(message: Message):
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb_ok = types.InlineKeyboardButton(text='üöö –î–æ—Å—Ç–∞–≤–∫–∞', callback_data=f'btn_delivery')
    kb_wr = types.InlineKeyboardButton(text='üè™ –°–∞–º–æ–≤—ã–≤–æ–∑', callback_data=f'btn_pick_up')
    kb.add(kb_ok, kb_wr)
    print('–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ ' + str(message.chat.id))
    await bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.', reply_markup=kb)


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
